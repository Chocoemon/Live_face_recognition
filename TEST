# 사진내에서 얼굴을 검출해내는 CODE + 영상 계속 따오기 .

import cv2
import asyncio
import io
import glob
import os
import sys
import time
import uuid
import requests
from urllib.parse import urlparse
from io import BytesIO
from PIL import Image, ImageDraw
from azure.cognitiveservices.vision.face import FaceClient
from msrest.authentication import CognitiveServicesCredentials
from azure.cognitiveservices.vision.face.models import TrainingStatusType, Person, SnapshotObjectType, OperationStatusType

#1. Make string related with KEY, ENDPOINT
KEY = os.environ['FACE_SUBSCRIPTION_KEY']
ENDPOINT = os.environ['FACE_ENDPOINT']

#2. Make class (face_client)
face_client = FaceClient(ENDPOINT, CognitiveServicesCredentials(KEY))

#여기까지는 동일!!
#single_face_image = 내가 찾고자 하는 사진 Directory가 들어가야함.
single_face_image_path = "C:/Users/CNH/PycharmProjects/untitled/image/123.jpg"
single_image_name = os.path.basename(single_face_image_path)
image_name_1 = open(single_face_image_path, 'rb')
detected_faces = face_client.face.detect_with_stream(image=image_name_1, return_face_id=True)
if not detected_faces:
    raise Exception('No face detected from image {}'.format(single_image_name))

# Display the detected face ID in the first single-face image.
# Face IDs are used for comparison to faces (their IDs) detected in other images.
print('Detected face ID from', single_image_name, ':')
for face in detected_faces: print (face.face_id)
print()

# Save this ID for use in Find Similar
first_image_face_ID = detected_faces[0].face_id


# 여기서 부터는 유사얼굴 찾기 프로그램

# Detect the faces in an image that contains multiple faces
# Each detected face gets assigned a new ID
#여기는 파일로부터 연속적으로 비교하는걸 찾아줘야함.

multi_face_image_path = "C:/Users/CNH/PycharmProjects/untitled/image/456.jpg"
multi_image_name = os.path.basename(multi_face_image_path)
image_name_2 = open(multi_face_image_path, 'rb')
detected_faces2 = face_client.face.detect_with_stream(image=image_name_2,return_face_id=True)

if not detected_faces2:
    raise Exception('No face detected from image {}'.format(multi_image_name))

# Display the detected face ID in the first single-face image.
# Face IDs are used for comparison to faces (their IDs) detected in other images.
print('Detected face ID from', multi_image_name, ':')
for face in detected_faces2: print (face.face_id)

# Search through faces detected in group image for the single face from first image.
# First, create a list of the face IDs found in the second image.
second_image_face_IDs = list(map(lambda x: x.face_id, detected_faces2))
# Next, find similar face IDs like the one detected in the first image.
similar_faces = face_client.face.find_similar(face_id=first_image_face_ID, face_ids=second_image_face_IDs)
if not similar_faces[0]:
    print('No similar faces found in', multi_image_name, '.')


# 일치 항목 출력

# Print the details of the similar faces detected
print('Similar faces found in', multi_image_name + ':')
for face in similar_faces:
    first_image_face_ID = face.face_id
    # The similar face IDs of the single face image and the group image do not need to match,
    # they are only used for identification purposes in each image.
    # The similar faces are matched using the Cognitive Services algorithm in find_similar().
    face_info = next(x for x in detected_faces2 if x.face_id == first_image_face_ID)
    if face_info:
        print('  Face ID: ', first_image_face_ID)
        print('  Face rectangle:')
        print('    Left: ', str(face_info.face_rectangle.left))
        print('    Top: ', str(face_info.face_rectangle.top))
        print('    Width: ', str(face_info.face_rectangle.width))
        print('    Height: ', str(face_info.face_rectangle.height))

        y = face_info.face_rectangle.left
        x = face_info.face_rectangle.top
        w = face_info.face_rectangle.width
        h = face_info.face_rectangle.height

    img = cv2.imread(multi_face_image_path)
    img = img[x-10:x+w+10,y-10:y+h+10]
    cv2.imshow("linear", img)
    cv2.waitKey(0)
    #cv2.destroyAllWindows()
